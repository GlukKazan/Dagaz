(define (not-diagonal? x r n)
   (if (is-empty? r)
       1
     else
       (let y (car r))
       (if (= (abs (- x y)) n)
            0
         else
            (not-diagonal? x (cdr r) (+ n 1))
       )
   )
)

(define (queens n r)
   (if (<= n 0)
       (set! distinct out r)
     else
       (let x (any 1 _ in))
       (check (not-contains? x r))
       (check (not-diagonal? x r 1))
       (queens (- n 1) (cons x r))
   )
)

(define main
   (count
       (queens in nil)
   )
)
