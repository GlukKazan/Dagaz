(import "chess-common.drf" chess-common chess-board-10x10)

(define (common-slide first-zone first-dir second-zone second-dir long-move?)
   (check (in-zone? first-zone))
   (check (any first-dir))
   (while (and is-empty? (in-zone? first-zone))
      end-move
      (check first-dir)
      (set! long-move? true)
   )
   (if long-move?
       (check (and not-friend? (in-zone? second-zone)))
       end-move
       (check is-empty?)
    else
       (check (and is-empty? (in-zone? second-zone)))
       end-move
   )
   (check (any second-dir))
   (log (order 1) " - " position)
   (while (and is-empty? (in-zone? second-zone))
      end-move
      (check second-dir)
   )
   (check (and not-friend? (in-zone? second-zone)))
)

(piece
   (name Gala G)
   (is-a chess-common)
   (dir n e s w nw ne sw se)
   (move
      (let is-outer? (in-zone? outer-zone))
      (check (any dir))
      (if (= is-outer? (in-zone? outer-zone))
         (check is-empty?)
       else
         (check not-friend?)
      )
   )
   (move
      (check (in-zone? goal-zone))
      (let old-position position)
      (any target-zone)
      (check is-empty?)
      (check (!= old-position position))
   )
)

(define (kampa-shift zone dir)
   (check (in-zone? zone))
   (check dir)
   (check is-empty?)
   end-move
   (check (in-zone? zone))
   (check dir)
   (check is-empty?)
)

(piece
   (name Kampa P)
   (is-a chess-common)
   (dir n e s w nw ne sw se)
   (move (kampa-shift left-zone ne))
   (move (kampa-shift right-zone nw))
   (move
      (check (in-zone? inner-zone))
      (check (any dir))
   )
)

(piece
   (name Horsa H)
   (is-a chess-common)
   (outer-dir n e s w)
   (inner-dir nw ne sw se)
   (move (common-slide outer-zone outer-dir inner-zone inner-dir true))
   (move (common-slide inner-zone inner-dir outer-zone outer-dir false))
)

(piece
   (name Korna K)
   (is-a chess-common)
   (outer-dir nw ne sw se)
   (inner-dir n e s w)
   (move (common-slide outer-zone outer-dir inner-zone inner-dir true))
   (move (common-slide inner-zone inner-dir outer-zone outer-dir true))
)

(define cross
   a5 b5 c5 d5 g5 h5 i5 j5 a6 b6 c6 d6 g6 h6 i6 j6 e1 e2 e3 e4 e7 e8 e9 e10 f1 f2 f3 f4 f7 f8 f9 f10
)

(define goal
   e5 e6 f5 f6
)

(define white-left
   a1 a2 a3 a4 b1 b2 b3 b4 c1 c2 c3 c4 d1 d2 d3 d4
)

(define white-right
   g1 g2 g3 g4 h1 h2 h3 h4 i1 i2 i3 i4 j1 j2 j3 j4
)

(define black-left
   g7 g8 g9 g10 h7 h8 h9 h10 i7 i8 i9 i10 j7 j8 j9 j10
)

(define black-right
   a7 a8 a9 a10 b7 b8 b9 b10 c7 c8 c9 c10 d7 d8 d9 d10
)

(define target
   b4 c4 d4 c3 d3 d2 g4 h4 i4 g3 h3 g2 b7 c7 d7 c8 d8 d9 g7 h7 i7 g8 h8 g9
)

(player
   (name White)
   (zone (name inner-zone)  cross goal)
   (zone (name outer-zone)  white-left white-right black-left black-right)
   (zone (name home-zone)   white-left white-right)
   (zone (name left-zone)   white-left)
   (zone (name right-zone)  white-right)
   (zone (name goal-zone)   goal)
   (zone (name target-zone) cross goal target)
)

(player
   (name Black)
   (sym  nw se)
   (sym  se nw)
   (sym  ne sw)
   (sym  sw ne)
   (zone (name inner-zone)  cross goal)
   (zone (name outer-zone)  white-left white-right black-left black-right)
   (zone (name home-zone)   black-left black-right)
   (zone (name left-zone)   black-left)
   (zone (name right-zone)  black-right)
   (zone (name goal-zone)   goal)
   (zone (name target-zone) cross goal target)
)

(game 
   (name "Gala")
   (board chess-board-10x10)
   (players 
      (White 
         (P a4 b3 c2 d1 g1 h2 i3 j4)
         (G a1 j1)
         (K i1 j2 a3 b2 c1)
         (H a2 b1 h1 i2 j3)
      )
      (Black
         (P a7 b8 c9 d10 g10 h9 i8 j7)
         (G a10 j10)
         (K a9 b10 h10 i9 j8)
         (H i10 j9 a8 b9 c10)
      )
   )
   (win
      (= 2 (count
         (any G)
         (check is-friend?)
         (check (in-zone? goal-zone))
      ))
   )
   (loss 
      (not-exists?
         (any G)
         (check is-friend?)
      )
   )
   (draw
      (and
         (= 1 (count
            (any G)
            (check is-friend?)
         ))
         (= 1 (count
            (any G)
            (check is-enemy?)
         ))
      )
   )
)
