(import "xiangqi.drf" xiangqi-board in-castle)
(import "shatranj.drf" chess-invariant leaper slider knight-piece)

(piece
   (name janggi-invariant)
   (pre
      (set! result 1)
   )
   (post
      (all
         (any K)
         (if is-friend?
             (while n
                 (if (and is-enemy? (is-piece? K))
                     (check F)
                 )
             )
         )
      )
   )
)

(piece
   (name King K)
   (is-a leaper)
   (is-a in-castle)
   (is-a janggi-invariant)
   (dir n e s w nw ne se sw)
)

(piece
   (name Mandarin M)
   (is-a leaper)
   (is-a in-castle)
   (is-a janggi-invariant)
   (dir n e s w nw ne se sw)
)

(piece
   (name Horse H)
   (is-a knight-piece)
   (is-a janggi-invariant)
   (move
      (check (any first-dir))
      (check is-empty?)
      (check (any second-dir))
   )
)

(piece
   (name Elephant E)
   (is-a knight-piece)
   (is-a janggi-invariant)
   (move
      (check (any first-dir))
      (check is-empty?)
      (check (any second-dir))
      (check is-empty?)
      (check second-dir)
   )
)

(piece
   (name Rook R)
   (is-a slider)
   (is-a janggi-invariant)
   (dir n e s w)
   (castle-dir nw ne se sw)
   (move
      (check (in-zone? castle))
      (check (any castle-dir))
      (check (in-zone? castle))
      (while is-empty?
         end-move
         (check castle-dir)
         (check (in-zone? castle))
      )
   )
)

(piece
   (name Cannon C)
   (is-a chess-invariant)
   (is-a janggi-invariant)
   (dir n e s w)
   (move
      (check (any dir))
      (while is-empty?
         (check dir)
      )
      (check dir)
      (while is-empty?
         end-move
         (check dir)
      )
   )
)

(piece
   (name Pawn P)
   (is-a leaper)
   (is-a janggi-invariant)
   (dir n w e)
   (castle-dir s nw ne se sw)
   (move
      (check (in-zone? castle))
      (check (any castle-dir))
      (check (in-zone? castle))
   )
)

(player
   (name player-invariant)
   (post
      (check (>= result max-result))
      (set! max-result result)
   )
   (move
      (check (= 0 max-result))
      (check not-passed?)
      (set! not-passed? F)
   )
)

(player
   (name Red)
   (is-a player-invariant)
   (zone (name castle) d1 e1 f1 d2 e2 f2 d3 e3 f3)
   (zone (name home-zone)  b1 c1 g1 h1)
   (zone (name left-zone)  b1 c1)
   (zone (name right-zone) g1 h1)
   (attribute not-passed? T)
)

(player
   (name Black)
   (is-a player-invariant)
   (sym n s)
   (zone (name castle) d10 e10 f10 d9 e9 f9 d8 e8 f8)
   (zone (name home-zone)  b10 c10 g10 h10)
   (zone (name left-zone)  b10 c10)
   (zone (name right-zone) g10 h10)
   (attribute not-passed? T)
)

(define setup-check
   (check
      (and 
         (exists
            (any H)
            (in-zone left-zone)
         )
         (exists
            (any H)
            (in-zone right-zone)
         )
      )
   )
)

(game
   (name "Janggi")
   (board xiangqi-board)
   (players 
      (Red 
         (K e2)
         (M d1 f1)
         (E home-zone 2)
         (H home-zone 2)
         (R a1 i1)
         (C b3 h3)
         (P a4 c4 e4 g4 i4)
         setup-check
      )
      (Black
         (K e9)
         (M d10 f10)
         (E home-zone 2)
         (H home-zone 2)
         (R a10 i10)
         (C b8 h8)
         (P a7 c7 e7 g7 i7)
         setup-check
      )
   )
   (loss 
      (any King)
      (if is-friend?
          (check is-attacked?)
      )
      (check no-moves?)
   )
   (draw
      (order 1)
      (check no-moves?)
   )
)
