(define goals
   (check-win (not-exists? any-position (check is-friend?)))
)

(define check-not-protect
   (check (not-zone? protect))
)

(define (set-penalty value)
   (check (= min-penalty value))
   (set! penalty value)
)

(define invariant
   (check (<= penalty min-penalty))
   (set! min-penalty penalty)
)

(define check-player
   (check is-friend?)
)

(define check-random
   (check (= current-player ?Random))
)

(define dice-drop
   (check (in-zone? dices))
   (check is-empty?)
   drop-pieces
   add-move
)

(define sum-dices
   (set! step-count 
       (count
            (any-position dices)
            (check (is-piece? One))
       )
   )
   (all
       (any-position dices)
       (check not-empty?)
       capture
   )
   (if (= step-count 0)
       (set! step-count 5)
   )
)

(define (move-to-count direction check-stop?)
   (take-piece-to-head current-pieces)
   (let step-count step-count)
   (while (decrement! step-count)
       (check direction)
       (if is-enemy?
           (check (not-enemy? direction))
       )
       (if is-friend?
           (check (not-friend? direction))
       )
       (if (and check-stop? (in-zone? stop))
           (set! step-count 0)
       )
   )
)

(define move-to-rebirth
   (check rebirth)
   (while not-empty?
       (check backward)
   )
)

(define (man-move direction opposite)
   (check (not-zone? protect))
   (let starting-position current-position)
   (move-to-count direction true)
   (if (and (in-zone? water) not-empty?)
       move-to-rebirth
       (drop-pieces current-pieces)
    else
       (check not-friend?)
       (if is-enemy?
           (check (not-zone? protect))
           (check (= (is-enemy? direction) (is-enemy? opposite)))
           (take-piece-to-head enemy-pieces)
           (drop-pieces current-pieces)
           starting-position
           (drop-pieces enemy-pieces)
        else
           (drop-pieces current-pieces)
       )
   )
   add-move
)

(define man-move-beauty
   (check (in-zone? beauty))
   (move-to-count forward false)
   (if not-empty?
       (check water)
       (if not-empty?
           move-to-rebirth
       )
   )
   (drop-pieces current-pieces)
   (if (in-zone? end) capture)
   add-move
)

(define man-move-water
   (check (in-zone? water))
   (move-to-count forward false)
   (if (not-zone? end)
        move-to-rebirth
   )
   (drop-pieces current-pieces)
   (if (in-zone? end) capture)
   add-move
)

(define (man-move-zone zone)
   (check (in-zone? zone))
   (move-to-count forward false)
   (check (in-zone? end))
   (drop-pieces current-pieces)
   capture
   add-move
)

(define man-move-end
   (check forward)
   (check (in-zone? end))
   (drop-pieces current-pieces)
   capture
   add-move
)

(define check-repeat
   (if (or (= 1 step-count)
           (= 4 step-count)
           (= 5 step-count)
       repeat
   )
)

(game
   (title "Senet")
   (turn-order (label repeat)
               ?Random ?Random ?Random ?Random 
               White
               (label repeat)
               ?Random ?Random ?Random ?Random 
               Black
   )
   (board
      (grid (dimensions "A_J" "1")
            (direction (name forward)   1 0)
            (direction (name backward) -1 0)
      )
      (grid (dimensions "A_J" "2")
            (direction (name forward)  -1 0)
            (direction (name backward)  1 0)
      )
      (grid (dimensions "A_K" "3")
            (direction (name forward)   1 0)
            (direction (name backward) -1 0)
      )
      (grid (dimensions "a_d"))
      (link (name forward)  (J1 J2) (A2 A3))
      (link (name backward) (J2 J1) (A3 A2))
      (zone (name rebirth)  (positions F2))
      (zone (name protect)  (positions F3 G3 H3 I3 J3))
      (zone (name beauty)   (positions F3))
      (zone (name water)    (positions G3))
      (zone (name truths)   (positions H3))
      (zone (name Ra)       (positions I3))
      (zone (name stop)     (positions F3 K3))
      (zone (name end)      (positions K3))
      (zone (name dices)    (positions a b c d))
   )
   (pieces
      (attribute step-count 0)
      (attribute penalty 0)
      (attribute min-penalty 2)
      (post goals)
      (piece 
            (name Dice)
            (pre check-random)
            (piece (name Zero))
            (piece (name One))
            (moves dice-drop)
      )
      (piece
            (name Man)
            (pre check-player)
            (pre sum-dices)
            (post invariant)
            (post check-repeat)
            (moves 
                 (man-move forward backward)
                 man-move-beauty
                 man-move-water
                 (man-move-zone truths)
                 (man-move-zone Ra)
                 man-move-end
            )
            (moves 
                 (pre check-not-protect)
                 (pre (set-penalty 1))
                 (man-move backward forward)
            )
            (moves 
                 (pre (set-penalty 2))
                 pass
            )
      )
   )
   (setup
      (White
            (Man B1 D1 F1 H1 J1)
      )
      (Black
            (Man A1 C1 E1 G1 I1)
      )
   )
)

(variant
   (title "Senet (7 Mans)")
   (setup
      (White
            (Man B1 D1 F1 H1 J1 B2 D2)
      )
      (Black
            (Man A1 C1 E1 G1 I1 A2 C2)
      )
   )
)
