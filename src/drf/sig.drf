(define goals
   (check-win (not-exists? any-position (check is-enemy?)))
)

(define (set-penalty value)
   (check (= min-penalty value))
   (set! penalty value)
)

(define invariant
   (check (<= penalty min-penalty))
   (set! min-penalty penalty)
)

(define check-player
   (check is-friend?)
)

(define check-random
   (check (= current-player ?Random))
)

(define dice-drop
   (check (in-zone? dices))
   (check is-empty?)
   drop-pieces
   add-move
)

(define sum-dices
   (set! dices-count 
       (count
            (any-position dices)
            (check (is-piece? White))
       )
   )
   (all
       (any-position dices)
       (check not-empty?)
       capture
   )
)

(define (man-move dices-req step-count)
   (check (= dices-req dices-count))
   (check is-active?)
   (if (in-zone? stop)
       (check move-in-enemy-home?)
       (set-penalty 1)
   )
   (undo-log current-player
       (take-piece-to-head current-pieces)
       (while (decrement! step-count)
           (check up)
       )
       (check not-friend?)
       (drop-pieces current-pieces)
       add-move
   )
)

(define khadzh
   (check (= 1 dices-count))
   (check (not is-active?))
   (undo-log current-player
       (set! is-active? true)
       add-move
   )
)

(define khmar
   (check (= 2 dices-count))
   (if (undo current-player)
       add-move
   )
)

(define check-repeat
   (if (or (= 1 dices-count)
           (= 2 dices-count)
           (= 4 dices-count)
       repeat
   )
)

(game
   (title "Sig")
   (turn-order (label (players First) repeat)
               ?Random ?Random ?Random ?Random 
               First
               (label (players Second) repeat)
               ?Random ?Random ?Random ?Random 
               Second
   )
   (board
      (grid (dimensions "A" "1_20")
            (direction (name up)    0  1)
            (direction (name down)  0  1)
      )
      (grid (dimensions "B" "1_20")
            (direction (name up)    0 -1)
            (direction (name down)  0 -1)
      )
      (grid (dimensions "C" "1_20")
            (direction (name up)    0  1)
            (direction (name down)  0  1)
      )
      (grid (dimensions "D" "1_20")
            (direction (name up)    0 -1)
            (direction (name down)  0 -1)
      )
      (grid (dimensions "a_d"))
      (link (name up)   (A20 B20) (B1 C1) (C20 D20))
      (link (name down) (B1 A1) (C20 B20) (D1 C1))
      (symmetry (players Second) (up down))
      (zone (name dices) (positions a b c d))
      (zone (name stop)
            (players First)
            (positions D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20)
      )
      (zone (name stop)
            (players Second)
            (positions A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15 A16 A17 A18 A19 A20)
      )
      (attribute (name move-in-enemy-home?) true)
   )
   (pieces
      (attribute dices-count 0)
      (attribute penalty 0)
      (attribute min-penalty 2)
      (post goals)
      (piece 
            (name Dice)
            (pre check-random)
            (piece (name Black))
            (piece (name White))
            (moves dice-drop)
      )
      (piece
            (name Man)
            (attribute is-active? false)
            (pre check-player)
            (pre sum-dices)
            (post invariant)
            (post check-repeat)
            (moves 
                 (man-move 3 5)
                 (man-move 4 4)
                 (man-move 0 8)
                 khadzh khmar
            )
            (moves 
                 (pre (set-penalty 2))
                 pass
            )
      )
   )
   (setup
      (First
            (Man A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15 A16 A17 A18 A19 A20)
      )
      (Second
            (Man D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 D11 D12 D13 D14 D15 D16 D17 D18 D19 D20)
      )
   )
)
