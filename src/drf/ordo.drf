(define variables
   (let penalty-count 0)
   (let min-penalty-count 1)
)

(define set-penalty
   (set! penalty-count 1)
)

(define add-piece-recursive
   (copy-piece-to-tail current-group)
   (foreach current-group
       (foreach (try-directions (check is-friend?))
           (if (not (piece-contains current-group))
               (copy-piece-to-tail current-group)
           )
       )
   )
)

(define invariant
   (foreach (try-positions (check is-friend?))
       (if (is-empty? current-group)
            add-piece-recursive
       )
       (check (piece-contains current-group))
   )
   (check (<= penalty-count max-penalty-count))
   (set! max-penalty-count penalty-count)
)

(define pre-goals
   (check-loss 
       (not-exists? try-moves)
   )
)

(define post-goals
   (check-win 
       (exists?
          (check is-friend?)
          (check (in-zone? goal))
       )
   )
)

(define check-friend
   (check is-friend?)
)

(define (single-move direction)
   (take-piece-to-head current-pieces)
   (check direction)
   (while is-empty?
      clone-state
      (drop-pieces current-pieces)
      add-move
      (check direction)
   )
   (check is-enemy?)
   (drop-pieces current-pieces)
   add-move
)

(define (build-stack direction)
   (take-piece-to-head current-pieces)
   (while (is-friend? direction)
      (take-piece-to-tail current-pieces)
      add-variant
      (check direction)
   )
)

(define (ordo-move direction)
   (comment turn-mode)
   (comment (count current-pieces))
   (check direction)
   (while (empty-stack? current-pieces)
      clone-state
      (drop-pieces current-pieces)
      add-move
      (check direction)
   )
)

(game
   (title "Ordo")
   (players Light Dark)
   (board
      (grid (dimensions "A_J" "8_1")
            (direction (name n)     0 -1)
            (direction (name s)     0  1)
            (direction (name e)     1  0)
            (direction (name w)    -1  0)
            (direction (name nw)   -1 -1)
            (direction (name ne)    1 -1)
            (direction (name sw)   -1  1)
            (direction (name se)    1  1)
      )
      (zone (name goal)
            (players Light)
            (positions A8 B8 C8 D8 E8 F8 G8 H8 I8 J8)
      )
      (zone (name goal)
            (players Dark)
            (positions A1 B1 C1 D1 E1 F1 G1 H1 I1 J1)
      )
      (symmetry (players Dark) (n s)(s n)(nw sw)(sw nw)(ne se)(se ne))
   )
   (pieces
      (pre  check-friend)
      (pre  variables)
      (pre  pre-goals)
      (post invariant)
      (post post-goals)
      (piece 
            (name Man)
            (moves
                (mode single)
                (single-move n)(single-move nw)(single-move ne)
                (single-move w)(single-move e)
            )
            (moves
                (mode single)
                (pre set-penalty)
                (single-move s)(single-move sw)(single-move se)
            )
            (moves
                (mode vertical)
                (pre (build-stack n))
                (ordo-move w) 
                (ordo-move e) 
                (ordo-move nw)
                (ordo-move ne)
            )
            (moves
                (mode horizontal)
                (pre (build-stack e))
                (ordo-move n) 
                (ordo-move nw)
                (ordo-move ne)
            )
            (moves
                (mode vertical)
                (pre (build-stack n))
                (pre set-penalty)
                (ordo-move sw)
                (ordo-move se)
            )
            (moves
                (mode horizontal)
                (pre (build-stack e))
                (pre set-penalty)
                (ordo-move s)
                (ordo-move sw)
                (ordo-move se)
            )
      )
   )
   (setup
      (White
            (Man A2 A3 B2 B3 C1 C2 D1 D2 E2 E3 F2 F3 G1 G2 H1 H2 I2 I3 J2 J3)
      )
      (Black
            (Man A7 A6 B7 B6 C8 C7 D8 D7 E7 E6 F7 F6 G8 G7 H8 H7 I7 I6 J7 J6)
      )
   )
)
