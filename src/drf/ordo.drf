(define (set-penalty value)
   (check (= min-penalty value))
   (set! penalty value)
)

(define check-penalty
   (check (<= penalty min-penalty))
   (set! min-penalty penalty)
)

(define add-piece-neighbors
   (foreach current-group
       (all
           (check (any n s e w nw sw ne se))
           (check is-friend?)
           (if (not (piece-contains current-group))
               (copy-piece-to-tail current-group)
           )
       )
   )
)

(define check-coherence
   (once
       (check is-friend?)
       (copy-piece-to-head current-group)
       add-piece-neighbors
   )
   (if (not-empty? current-group)
       (check (piece-contains current-group))
   )
)

(define not-used?
   (foreach (list-of-the-lists current-group)
       (check (not-contains? current-group))
   )
)

(define separate-pieces
   (all
       (check is-friend?)
       (check not-used?)
       (let current-group empty-list)
       (copy-piece-to-head current-group)
       add-piece-neighbors
       (add-to-tail list-of-the-lists current-group)
   )
)

(define repair-coherence
   (let max-size 0)
   separate-pieces
   (foreach (list-of-the-lists current-group)
       (if (>= (size current-group) max-size)
           (set! max-size (size current-group))
       )
   )
   (foreach (list-of-the-lists current-group)
       (if (< (size current-group) max-size)
           (foreach current-group
               capture
           )
           (del-from list-of-the-lists current-group)
       )
   )
   (if (> (size list-of-the-lists) 1)
       (let current-group (any list-of-the-lists))
       (foreach current-group
           (comment "x" current-position)
           capture
       )
   )
)

(define pre-goals
   (check-loss 
       (not-exists? try-moves)
   )
)

(define post-goals
   (check-win 
       (exists?
           (check is-friend?)
           (check (in-zone? goal))
       )
   )
)

(define check-friend
   (check is-friend?)
)

(define (single-move direction)
   (take-piece-to-head current-pieces)
   (check direction)
   (while is-empty?
      (drop-pieces current-pieces)
      add-move
      (check direction)
   )
   (check is-enemy?)
   (drop-pieces current-pieces)
   add-move
)

(define (build-stack direction)
   (take-piece-to-head current-pieces)
   (while (is-friend? direction)
      (take-piece-to-tail current-pieces)
      add-variant
      (check direction)
   )
)

(define (ordo-move direction)
   (comment turn-mode)
   (comment (count current-pieces))
   (check direction)
   (while (empty-stack? current-pieces)
      (drop-pieces current-pieces)
      add-move
      (check direction)
   )
)

(macro define-common-moves
   (moves
       (mode single)
       (single-move n)(single-move nw)(single-move ne)
       (single-move w)(single-move e)
   )
   (moves
       (mode vertical)
       (pre (build-stack n))
       (ordo-move w) 
       (ordo-move e) 
   )
   (moves
       (mode horizontal)
       (pre (build-stack e))
       (ordo-move n) 
   )
)

(macro define-penalty-moves
   (moves
       (mode single)
       (pre (set-penalty 1))
       (single-move s)(single-move sw)(single-move se)
   )
   (moves
       (mode horizontal)
       (pre (build-stack e))
       (pre (set-penalty 1))
       (ordo-move s)
   )
)

(macro define-common-x-moves
   (moves
       (mode vertical)
       (pre (build-stack n))
       (ordo-move nw)
       (ordo-move ne)
   )
   (moves
       (mode horizontal)
       (pre (build-stack e))
       (ordo-move nw)
       (ordo-move ne)
   )
)

(game
   (title "Ordo")
   (turn-order Light Dark)
   (board
      (grid (dimensions "A_J" "8_1")
            (direction (name n)     0 -1)
            (direction (name s)     0  1)
            (direction (name e)     1  0)
            (direction (name w)    -1  0)
            (direction (name nw)   -1 -1)
            (direction (name ne)    1 -1)
            (direction (name sw)   -1  1)
            (direction (name se)    1  1)
      )
      (zone (name goal)
            (players Light)
            (positions A8 B8 C8 D8 E8 F8 G8 H8 I8 J8)
      )
      (zone (name goal)
            (players Dark)
            (positions A1 B1 C1 D1 E1 F1 G1 H1 I1 J1)
      )
      (symmetry (players Dark) (n s)(s n)(nw sw)(sw nw)(ne se)(se ne))
   )
   (pieces
      (attribute penalty 0)
      (attribute min-penalty 1)
      (pre  check-friend)
      (pre  pre-goals)
      (post check-coherence)
      (post check-penalty)
      (post post-goals)
      (piece 
            (name Man)
            (define-common-moves)
            (define-penalty-moves)
      )
   )
   (setup
      (White
            (Man A2 A3 B2 B3 C1 C2 D1 D2 E2 E3 F2 F3 G1 G2 H1 H2 I2 I3 J2 J3)
      )
      (Black
            (Man A7 A6 B7 B6 C8 C7 D8 D7 E7 E6 F7 F6 G8 G7 H8 H7 I7 I6 J7 J6)
      )
   )
)

(variant
   (title "OrdoX")
   (pieces
      (attribute penalty 0)
      (attribute min-penalty 1)
      (pre  check-friend)
      (pre  pre-goals)
      (post check-coherence)
      (post check-penalty)
      (post post-goals)
      (piece 
            (name Man)
            (moves 
                (pre check-coherence)
                (define-common-moves)
                (define-common-x-moves)
            )
            (moves
                (attribute list-of-the-lists)
                (pre (set-penalty 1))
                (pre repair-coherence)
                (define-common-moves)
                (define-common-x-moves)
            )
      )
   )
)
