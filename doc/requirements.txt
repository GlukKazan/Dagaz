Модель
------
- Содержит неизменяемые данные
- Однотипные объекты могут наследоваться командной is-a
- Описывает:
  - Доску
    - Список именованных позиций (узлов графа) заданных командой pos
    - Список связей (окрашенных дуг графа) заданных командами link
    - Может использовать многомерные матрицы для более компактного описания
      - Определение измерений (dim) автоматически формирует позиции [1]
      - Определение направлений (dir) автоматически формирует связи [2]
      - Позиции и связи могут быть удалены командой unlink
      - Позиции могут быть связаны вручную [3]
      - Можно определить несколько матриц, связав их между собой [4]
    - Именованные переменные (let) [5]
    - Можно определять гексагональные доски [6]
  - Игроков
    - Имя игрока
    - Описание игровых зон [7]
    - Описание симметрий [8]
    - Отношение симметрии не симметрично [9]
  - Фигуры
    - Содержат код используемый генератором ходов
      - pre - действия выполняемые до генерации хода
      - move - правила генерации хода
      - post - действия выполняемые после генерации хода
    - Содержат описание переменных связанных с экземплярами фигур (атрибуты) [10]
    - Правила выполнения глобальных ходов [11]
  - Игры
    - Содержит описание доски (объект board)
    - Описание игроков [12]
      - Порядок очерёдности хода
      - Начальную расстановку фигур
    - Описание условий завершения игры [13]
- Не содержит данных, необходимых для визуализации

[1] Пример определения трёхмерной доски, не содержащей "j":

(board
   (dim "a-ik-o")
   (dim "a-ik-o")
   (dim "1-3")
)

приводит к тому, что становятся определены aa1, ... ai1, ai2, ai3, ak1, ... oo3

[2] Пример определения связей:

(board
   (dim "a-b")
   (dim "2-1")
   (dir (name n)   0 -1) ; a1 -> a2, b1 -> b2
   (dir (name e)   1  0) ; a1 -> b1, a2 -> b2
   (dir (name s)   0  1) ; a2 -> a1, b2 -> b1
   (dir (name w)  -1  0) ; b1 -> a1, b2 -> a2
)

n, e, s, w - окраска дуг (имена направлений могут повторяться на дугах)

[3] Для определения доски замкнутой в цилиндр можно использовать grid
    с последующим доопределнием недостающих дуг:

(board
   (name chess-board)
   (dim "a-h")
   (dim "8-1")
   (link w a1 h1)
   (link w a2 h2)
   ...
)

[4] Пример определения двух матриц:

(board
   (name a)
   (dim "1-2")
   (dim "a-b")
   (dir (name n) 0 1)
)

(board
   (name b)
   (dim "a-b")
   (dim "2-1")
   (dir (name n) 0 -1)
)

(board
   (is-a a)
   (is-a b)
   (link n a1 1a)
   ...
)

[5] Переменные - часть состояния доски, не связанная с какими либо позициями,
    могут использоваться для подсчёта взятых фигур

(board
   (name go-board)
   (dim "A-HJ-T")
   (dim "19-1")
   (let w-captured 0)
   (let b-captured 0)
)

[6] Пример определения гексогональной доски:

(board
   (dim "a-c")
   (dim "3-1")
   (dir (name nw) -1 -1)
   (dir (name ne)  0 -1)
   (dir (name w)  -1  0)
   (dir (name e)   1  0)
   (dir (name sw)  0  1)
   (dir (name se)  1  1)
   (unlink a1 c3)
)

    a3  b3  c3
  a2  b2  c2
a1  b1  c1
    
[7] Зоны превращения пешек могут быть описаны следующим образом:

(player
   (name White)
   (zone (name promotion) a8 b8 c8 d8 e8 f8 g8 h8)
)

(player
   (name Black)
   (zone (name promotion) a1 b1 c1 d1 e1 f1 g1 h1)
)

[8] Перемещение пешек удобно описывать единообразно (с использованием 
    направления n), транслируя это направление для других игроков, в
    соответсвии с заданными правилами симметрии

(piece
   (name Pawn)
   (move
      (check n)
   )
)

(player
   (name White)
)

(player
   (name Black)
   (sym  n s)
)

(game
   ...
   (players 
      (White ...)
      (Black ...)
   )
)

Для игрока Black, любое упоминание n будет преобразовано в s

[9] Определение симметрии не подразумевает обратного отношения. Это
    позволяет определять более сложные формы симметрии при игре
    4 игроков:

(player
   (name South)
)

(player
   (name West)
   (sym  n e)
)

(player
   (name North)
   (sym  n s)
)

(player
   (name East)
   (sym  n w)
)

[10] Атрибут - часть состояния фигуры (наряду с текущей позицией). Атрибуты
     могут использоваться для реализации сложной логики перемещения:

(piece
   (name Pawn)
   (let not-moved? true)
   (post
      (set! not-moved? false)
   )
   (move
      (check n)
   )
   (move
      (check not-moved?)
      (check n)
      (check empty?)
      (check n)
   )
)

[11] В игре Отелло (современный вариант Реверси) при невозможности выполнения
     хода, игрок пропускает ход. Чтобы игра не была прервана, ход должен быть
     описан явно. Но поскольку ход не связан с какими либо фигурами, он 
     описывается для игрока, а не для фигуры:

(player
   (name othello-invariant)
   (move
      (check (= 0 max-result))
      (log "pass")
   )
)

[12] Пример начальной расстановки фигур в Шахматах:

(game
   (name "Chess")
   (is-a chess-game)
   (board chess-board-8x8)
   (players 
      (White 
         (K e1)
         (Q d1)
         (R a1 h1)
         (N b1 g1)
         (B c1 f1)
         (P a2 b2 c2 d2 e2 f2 g2 h2)
      )
      (Black
         (K e8)
         (Q d8)
         (R a8 h8)
         (N b8 g8)
         (B c8 f8)
         (P a7 b7 c7 d7 e7 f7 g7 h7)
      )
   )
)

[13] В Шашках, невозможность выполнения хода приводит к поражению:

(game
   (name "Checkers")
   (board chess-board-8x8)
   (players 
      (Red (M a1 c1 e1 g1 b2 d2 f2 h2 a3 c3 e3 g3) )
      (White (M b8 d8 f8 h8 a7 c7 e7 g7 b6 d6 f6 h6) )
   )
   (loss
      (check no-moves?)
   )
)

Условие поражения проверяется до генерации хода игрока, но в целях оптимизации
формирует отложенную проверку. Если последующая генерация ходов не сформирует
ни одного хода, отложенная проверка срабатывает, завершая игру поражением.

